version: '3.8'

services:
    web:
        image: dhis2/core-dev:latest
        ports:
            - 8080:8080 # DHIS2
            - 8081:8081 # Debugger: connect using commandline flag -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8081
            - 9010:9010 # JMX port (for example for VisualVM)
        networks:
            mynetwork:
                ipv4_address: 172.26.0.6
        volumes:
            - ./docker/dhis.conf:/opt/dhis2/dhis.conf:ro
            - ./docker/log4j2.xml:/opt/dhis2/log4j2.xml:ro
        environment:
            JAVA_OPTS:
                "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8081 \
                -Dlog4j2.configurationFile=/opt/dhis2/log4j2.xml
                -Dcom.sun.management.jmxremote \
                -Dcom.sun.management.jmxremote.port=9010 \
                -Dcom.sun.management.jmxremote.local.only=false \
                -Dcom.sun.management.jmxremote.authenticate=false \
                -Dcom.sun.management.jmxremote.ssl=false"
        depends_on:
            db:
                condition: service_healthy

    db:
        image: ghcr.io/baosystems/postgis:12-3.3
        ports:
            - 5432:5432
        networks:
            mynetwork:
                ipv4_address: 172.26.0.7
        volumes:
            - ./docker/db-dump:/docker-entrypoint-initdb.d/
        environment:
            POSTGRES_USER: dhis
            POSTGRES_DB: dhis
            POSTGRES_PASSWORD: &postgres_password dhis
            PGPASSWORD: *postgres_password # needed by psql in healthcheck
        healthcheck:
            test:
                [
                    'CMD-SHELL',
                    'psql --no-password --quiet --username $$POSTGRES_USER postgres://127.0.0.1/$$POSTGRES_DB -p 5432 --command "SELECT ''ok''" > /dev/null',
                ]
            start_period: 300s
            interval: 1s
            timeout: 60s
            retries: 300
        depends_on:
            db-dump:
                condition: service_completed_successfully # make sure the DB dump has been downloaded

    db-dump:
        image: busybox # busybox wget version does not have --no-clobber, so we need to do the [ -f ] test
        command: sh -c '[ -f dump.sql.gz ] && echo "dump.sql.gz exists" || wget --output-document dump.sql.gz $$DHIS2_DB_DUMP_URL' # only download file if it does not exist
        environment:
            DHIS2_DB_DUMP_URL: 'https://databases.dhis2.org/sierra-leone/2.38/dhis2-db-sierra-leone.sql.gz'
        working_dir: /opt/dump
        volumes:
            - ./docker/db-dump:/opt/dump
        networks:
            mynetwork:
                ipv4_address: 172.26.0.8

    fake-smtp-server:
        image: gessnerfl/fake-smtp-server:2.2.0
        hostname: 'fake-smtp-server'
        restart: always
        environment:
            - FAKESMTP_AUTHENTICATION_USERNAME=myuser
            - FAKESMTP_AUTHENTICATION_PASSWORD=mysecretpassword
            - FAKESMTP_PORT=8030
            - SERVER_PORT=8031
            - MANAGEMENT_SERVER_PORT=8032
        ports:
            - 8030:8030 #expose smtp port
            - 8031:8031 #expose web ui
            - 8032:8032 #expose management api
        networks:
            mynetwork:
                ipv4_address: 172.26.0.9

    push-analytics:
        hostname: 'push-analytics'
        image: 'dhis2/core-dev:alpha'
        volumes:
            - ./:/usr/src/app
            - /usr/src/app/node_modules
        ports:
            - '${PORT}:${PORT}'
        networks:
            mynetwork:
                ipv4_address: 172.26.0.10

# volumes:
#   db-dump:

networks:
    mynetwork:
        ipam:
            config:
                - subnet: 172.26.0.0/24
